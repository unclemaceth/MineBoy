"use client";
import React, { useRef, useCallback, useEffect } from "react";

interface FanComponentProps {
  /** true while mining; false to trigger graceful coast & stop */
  spinning: boolean;
  size?: number;
}

/**
 * Behavior:
 * - when spinning turns true: spool up from slow -> PEAK fast for ~2 revs -> settle at FAST and hold
 * - when spinning turns false: gradually slow (coast) and stop cleanly
 *
 * Implementation detail:
 * - we rotate 1 revolution at a time; after each rev we re-evaluate the target duration
 *   and ease current duration toward it for smooth accel/decel
 */
export default function FanComponent({ spinning, size = 100 }: FanComponentProps) {
  // Tunables (ms per revolution)
  const IDLE_DUR = 1200;     // visual "at rest" / initial spool start
  const FAST_DUR = 220;      // steady fast speed while mining
  const PEAK_DUR = 150;      // brief overdrive at start to "whoosh"
  const COAST_DUR = 2200;    // target while coasting down
  const STOP_AFTER_DUR = 2000; // when coasting and duration exceeds this, stop next cycle
  const SMOOTH = 0.25;       // 0..1: how aggressively we move duration toward target each rev

  const fanRef = useRef<HTMLDivElement>(null);
  const animationRef = useRef<number | null>(null);

  // Refs to manage loop state outside render
  const runningRef = useRef(false);
  const spinningRef = useRef(spinning);
  const currentDurRef = useRef<number>(IDLE_DUR);
  const targetDurRef = useRef<number>(IDLE_DUR);
  const peakCyclesLeftRef = useRef<number>(0);
  const startTimeRef = useRef<number>(0);
  const currentAngleRef = useRef<number>(0);

  // keep latest prop in a ref for callbacks
  useEffect(() => {
    spinningRef.current = spinning;
  }, [spinning]);

  const step = useCallback(() => {
    const duration = Math.max(16, currentDurRef.current);
    startTimeRef.current = performance.now();
    
    const animate = (currentTime: number) => {
      const elapsed = currentTime - startTimeRef.current;
      const progress = Math.min(elapsed / duration, 1);
      
      // Linear rotation from 0 to 360 degrees
      const angle = progress * 360;
      currentAngleRef.current = angle;
      
      if (fanRef.current) {
        fanRef.current.style.transform = `rotate(${angle}deg)`;
      }
      
      if (progress < 1 && runningRef.current) {
        animationRef.current = requestAnimationFrame(animate);
      } else {
        // Revolution complete
        if (!runningRef.current) return; // loop was told to stop
        
        // If we're still in PEAK, count down those cycles
        if (peakCyclesLeftRef.current > 0) {
          peakCyclesLeftRef.current -= 1;
        }

        // Decide what our target duration is for the next rev
        if (spinningRef.current) {
          // while mining: brief PEAK then FAST
          targetDurRef.current = peakCyclesLeftRef.current > 0 ? PEAK_DUR : FAST_DUR;
        } else {
          // mining stopped: coast
          targetDurRef.current = COAST_DUR;
        }

        // Smoothly move current duration toward target
        const cd = currentDurRef.current;
        const td = targetDurRef.current;
        currentDurRef.current = cd + (td - cd) * SMOOTH;

        // If we're coasting and sufficiently slow, stop after this rev
        if (!spinningRef.current && currentDurRef.current > STOP_AFTER_DUR) {
          runningRef.current = false;
          // settle the needle
          if (fanRef.current) {
            fanRef.current.style.transform = `rotate(0deg)`;
          }
          return;
        }

        // keep spinning
        step();
      }
    };
    
    animationRef.current = requestAnimationFrame(animate);
  }, []);

  const ensureRunning = useCallback(() => {
    if (runningRef.current) return;
    runningRef.current = true;
    step();
  }, [step]);

  useEffect(() => {
    if (spinning) {
      // starting / resuming mining -> spool up
      // if we were idle, start from IDLE speed for a nicer ramp
      if (!runningRef.current) {
        currentDurRef.current = IDLE_DUR;
      }
      peakCyclesLeftRef.current = 2; // a couple of super-fast spins for a satisfying "whoosh"
      targetDurRef.current = PEAK_DUR;
      ensureRunning();
    } else {
      // stop requested -> switch target to COAST, loop will slow & stop itself
      if (runningRef.current) {
        targetDurRef.current = COAST_DUR;
      } else {
        // fully idle
        currentDurRef.current = IDLE_DUR;
        if (animationRef.current) {
          cancelAnimationFrame(animationRef.current);
        }
        if (fanRef.current) {
          fanRef.current.style.transform = `rotate(0deg)`;
        }
      }
    }
  }, [spinning, ensureRunning]);

  // cleanup on unmount
  useEffect(() => {
    return () => {
      runningRef.current = false;
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  return (
    <div style={{ width: size, height: size, position: "relative" }}>
      <div ref={fanRef} style={{ width: size, height: size }}>
        <svg width={size} height={size} viewBox="0 0 400 400">
          <defs>
            {/* Blue-grey metallic gradient */}
            <linearGradient id="fanMetallic" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#8fa0b3" />
              <stop offset="25%" stopColor="#6b7a8f" />
              <stop offset="50%" stopColor="#4a5568" />
              <stop offset="75%" stopColor="#5a6b7d" />
              <stop offset="100%" stopColor="#3a4a5c" />
            </linearGradient>
            {/* Light emboss stroke */}
            <linearGradient id="lightEmboss" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#b8c5d1" stopOpacity="0.8" />
              <stop offset="100%" stopColor="#b8c5d1" stopOpacity="0" />
            </linearGradient>
            {/* Dark emboss stroke */}
            <linearGradient id="darkEmboss" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#2a3441" stopOpacity="0" />
              <stop offset="50%" stopColor="#2a3441" stopOpacity="0.4" />
              <stop offset="100%" stopColor="#2a3441" stopOpacity="0.8" />
            </linearGradient>
          </defs>

          {/* Fan SVG paths */}
          <g transform="matrix(1.02374,0,0,1.0059,-1324.25,-1623.27)">
            <path
              d="M1421.54,1769.41C1421.73,1769.12 1421.75,1768.77 1421.62,1768.46C1421.49,1768.15 1421.2,1767.93 1420.88,1767.88C1372.36,1760.26 1333.38,1765.19 1300.97,1778.76C1297.95,1780.02 1292.89,1777.81 1293.61,1774.5C1303.21,1730.3 1322.52,1697.52 1348.7,1672.36C1358.99,1662.48 1366.26,1657.08 1410.01,1688.21C1434.88,1705.91 1446.78,1719.19 1462.85,1736.32C1463.11,1736.6 1463.5,1736.69 1463.86,1736.58C1471.77,1733.97 1480.22,1732.57 1489,1732.58C1490.23,1732.58 1491.44,1732.61 1492.65,1732.66C1492.98,1732.68 1493.3,1732.52 1493.49,1732.25C1493.68,1731.98 1493.73,1731.62 1493.61,1731.31C1475.96,1685.49 1452.21,1654.2 1424.26,1632.91C1421.65,1630.92 1421.04,1625.44 1424.27,1624.41C1467.36,1610.63 1505.39,1610.97 1540.28,1621.07C1553.98,1625.04 1562.28,1628.64 1557.19,1682.1C1554.29,1712.49 1548.72,1729.43 1541.92,1751.92C1541.81,1752.29 1541.92,1752.7 1542.21,1752.96C1549.42,1759.41 1555.45,1767.14 1559.94,1775.8C1560.09,1776.1 1560.38,1776.29 1560.71,1776.33C1561.03,1776.36 1561.35,1776.23 1561.56,1775.97C1592.39,1737.73 1607.58,1701.49 1612,1666.62C1612.41,1663.37 1616.85,1660.1 1619.36,1662.37C1652.87,1692.76 1671.63,1725.85 1680.37,1761.1C1683.8,1774.94 1684.85,1783.93 1636.03,1806.31C1608.28,1819.03 1590.83,1822.7 1567.97,1828.08C1567.6,1828.17 1567.31,1828.47 1567.23,1828.85C1565.22,1838.56 1561.45,1847.62 1556.27,1855.7C1556.09,1855.98 1556.06,1856.34 1556.19,1856.65C1556.33,1856.96 1556.61,1857.18 1556.93,1857.23C1605.46,1864.81 1644.43,1859.85 1676.84,1846.26C1679.86,1844.99 1684.91,1847.2 1684.2,1850.51C1674.63,1894.72 1655.34,1927.52 1629.18,1952.7C1618.9,1962.59 1611.63,1967.99 1567.86,1936.89C1542.97,1919.21 1531.07,1905.93 1514.98,1888.82C1514.72,1888.54 1514.33,1888.44 1513.97,1888.56C1506.05,1891.18 1497.58,1892.59 1488.78,1892.58C1487.57,1892.58 1486.38,1892.55 1485.18,1892.49C1484.85,1892.48 1484.54,1892.63 1484.35,1892.91C1484.15,1893.18 1484.11,1893.54 1484.23,1893.85C1501.91,1939.65 1525.68,1970.93 1553.65,1992.2C1556.26,1994.18 1556.87,1999.67 1553.64,2000.7C1510.57,2014.51 1472.53,2014.2 1437.64,2004.12C1423.94,2000.16 1415.63,1996.57 1420.69,1943.11C1423.56,1912.71 1429.12,1895.76 1435.9,1873.27C1436.01,1872.9 1435.9,1872.49 1435.61,1872.23C1428.37,1865.76 1422.32,1858 1417.81,1849.3C1417.66,1849.01 1417.37,1848.81 1417.05,1848.77C1416.72,1848.74 1416.4,1848.87 1416.19,1849.13C1385.34,1887.35 1370.12,1923.58 1365.68,1958.44C1365.26,1961.69 1360.82,1964.97 1358.31,1962.69C1324.82,1932.28 1306.08,1899.17 1297.38,1863.92C1293.95,1850.07 1292.91,1841.08 1341.75,1818.74C1369.51,1806.04 1386.96,1802.38 1409.82,1797.02C1410.19,1796.93 1410.48,1796.63 1410.56,1796.25C1412.58,1786.54 1416.35,1777.48 1421.54,1769.41ZM1488.99,1740.53C1449.23,1740.47 1416.89,1772.71 1416.84,1812.47C1416.78,1852.24 1449.02,1884.57 1488.79,1884.63C1528.55,1884.69 1560.88,1852.45 1560.94,1812.68C1561,1772.91 1528.76,1740.58 1488.99,1740.53ZM1488.89,1742.58C1527.52,1742.58 1558.89,1773.94 1558.89,1812.58C1558.89,1851.21 1527.52,1882.58 1488.89,1882.58C1450.26,1882.58 1418.89,1851.21 1418.89,1812.58C1418.89,1773.94 1450.26,1742.58 1488.89,1742.58Z"
              fill="url(#fanMetallic)"
            />
            <path
              d="M1421.54,1769.41C1421.73,1769.12 1421.75,1768.77 1421.62,1768.46C1421.49,1768.15 1421.2,1767.93 1420.88,1767.88C1372.36,1760.26 1333.38,1765.19 1300.97,1778.76C1297.95,1780.02 1292.89,1777.81 1293.61,1774.5C1303.21,1730.3 1322.52,1697.52 1348.7,1672.36C1358.99,1662.48 1366.26,1657.08 1410.01,1688.21C1434.88,1705.91 1446.78,1719.19 1462.85,1736.32C1463.11,1736.6 1463.5,1736.69 1463.86,1736.58C1471.77,1733.97 1480.22,1732.57 1489,1732.58C1490.23,1732.58 1491.44,1732.61 1492.65,1732.66C1492.98,1732.68 1493.3,1732.52 1493.49,1732.25C1493.68,1731.98 1493.73,1731.62 1493.61,1731.31C1475.96,1685.49 1452.21,1654.2 1424.26,1632.91C1421.65,1630.92 1421.04,1625.44 1424.27,1624.41C1467.36,1610.63 1505.39,1610.97 1540.28,1621.07C1553.98,1625.04 1562.28,1628.64 1557.19,1682.1C1554.29,1712.49 1548.72,1729.43 1541.92,1751.92C1541.81,1752.29 1541.92,1752.7 1542.21,1752.96C1549.42,1759.41 1555.45,1767.14 1559.94,1775.8C1560.09,1776.1 1560.38,1776.29 1560.71,1776.33C1561.03,1776.36 1561.35,1776.23 1561.56,1775.97C1592.39,1737.73 1607.58,1701.49 1612,1666.62C1612.41,1663.37 1616.85,1660.1 1619.36,1662.37C1652.87,1692.76 1671.63,1725.85 1680.37,1761.1C1683.8,1774.94 1684.85,1783.93 1636.03,1806.31C1608.28,1819.03 1590.83,1822.7 1567.97,1828.08C1567.6,1828.17 1567.31,1828.47 1567.23,1828.85C1565.22,1838.56 1561.45,1847.62 1556.27,1855.7C1556.09,1855.98 1556.06,1856.34 1556.19,1856.65C1556.33,1856.96 1556.61,1857.18 1556.93,1857.23C1605.46,1864.81 1644.43,1859.85 1676.84,1846.26C1679.86,1844.99 1684.91,1847.2 1684.2,1850.51C1674.63,1894.72 1655.34,1927.52 1629.18,1952.7C1618.9,1962.59 1611.63,1967.99 1567.86,1936.89C1542.97,1919.21 1531.07,1905.93 1514.98,1888.82C1514.72,1888.54 1514.33,1888.44 1513.97,1888.56C1506.05,1891.18 1497.58,1892.59 1488.78,1892.58C1487.57,1892.58 1486.38,1892.55 1485.18,1892.49C1484.85,1892.48 1484.54,1892.63 1484.35,1892.91C1484.15,1893.18 1484.11,1893.54 1484.23,1893.85C1501.91,1939.65 1525.68,1970.93 1553.65,1992.2C1556.26,1994.18 1556.87,1999.67 1553.64,2000.7C1510.57,2014.51 1472.53,2014.2 1437.64,2004.12C1423.94,2000.16 1415.63,1996.57 1420.69,1943.11C1423.56,1912.71 1429.12,1895.76 1435.9,1873.27C1436.01,1872.9 1435.9,1872.49 1435.61,1872.23C1428.37,1865.76 1422.32,1858 1417.81,1849.3C1417.66,1849.01 1417.37,1848.81 1417.05,1848.77C1416.72,1848.74 1416.4,1848.87 1416.19,1849.13C1385.34,1887.35 1370.12,1923.58 1365.68,1958.44C1365.26,1961.69 1360.82,1964.97 1358.31,1962.69C1324.82,1932.28 1306.08,1899.17 1297.38,1863.92C1293.95,1850.07 1292.91,1841.08 1341.75,1818.74C1369.51,1806.04 1386.96,1802.38 1409.82,1797.02C1410.19,1796.93 1410.48,1796.63 1410.56,1796.25C1412.58,1786.54 1416.35,1777.48 1421.54,1769.41ZM1488.99,1740.53C1449.23,1740.47 1416.89,1772.71 1416.84,1812.47C1416.78,1852.24 1449.02,1884.57 1488.79,1884.63C1528.55,1884.69 1560.88,1852.45 1560.94,1812.68C1561,1772.91 1528.76,1740.58 1488.99,1740.53ZM1488.89,1742.58C1527.52,1742.58 1558.89,1773.94 1558.89,1812.58C1558.89,1851.21 1527.52,1882.58 1488.89,1882.58C1450.26,1882.58 1418.89,1851.21 1418.89,1812.58C1418.89,1773.94 1450.26,1742.58 1488.89,1742.58Z"
              fill="none"
              stroke="url(#lightEmboss)"
              strokeWidth="1.5"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M1421.54,1769.41C1421.73,1769.12 1421.75,1768.77 1421.62,1768.46C1421.49,1768.15 1421.2,1767.93 1420.88,1767.88C1372.36,1760.26 1333.38,1765.19 1300.97,1778.76C1297.95,1780.02 1292.89,1777.81 1293.61,1774.5C1303.21,1730.3 1322.52,1697.52 1348.7,1672.36C1358.99,1662.48 1366.26,1657.08 1410.01,1688.21C1434.88,1705.91 1446.78,1719.19 1462.85,1736.32C1463.11,1736.6 1463.5,1736.69 1463.86,1736.58C1471.77,1733.97 1480.22,1732.57 1489,1732.58C1490.23,1732.58 1491.44,1732.61 1492.65,1732.66C1492.98,1732.68 1493.3,1732.52 1493.49,1732.25C1493.68,1731.98 1493.73,1731.62 1493.61,1731.31C1475.96,1685.49 1452.21,1654.2 1424.26,1632.91C1421.65,1630.92 1421.04,1625.44 1424.27,1624.41C1467.36,1610.63 1505.39,1610.97 1540.28,1621.07C1553.98,1625.04 1562.28,1628.64 1557.19,1682.1C1554.29,1712.49 1548.72,1729.43 1541.92,1751.92C1541.81,1752.29 1541.92,1752.7 1542.21,1752.96C1549.42,1759.41 1555.45,1767.14 1559.94,1775.8C1560.09,1776.1 1560.38,1776.29 1560.71,1776.33C1561.03,1776.36 1561.35,1776.23 1561.56,1775.97C1592.39,1737.73 1607.58,1701.49 1612,1666.62C1612.41,1663.37 1616.85,1660.1 1619.36,1662.37C1652.87,1692.76 1671.63,1725.85 1680.37,1761.1C1683.8,1774.94 1684.85,1783.93 1636.03,1806.31C1608.28,1819.03 1590.83,1822.7 1567.97,1828.08C1567.6,1828.17 1567.31,1828.47 1567.23,1828.85C1565.22,1838.56 1561.45,1847.62 1556.27,1855.7C1556.09,1855.98 1556.06,1856.34 1556.19,1856.65C1556.33,1856.96 1556.61,1857.18 1556.93,1857.23C1605.46,1864.81 1644.43,1859.85 1676.84,1846.26C1679.86,1844.99 1684.91,1847.2 1684.2,1850.51C1674.63,1894.72 1655.34,1927.52 1629.18,1952.7C1618.9,1962.59 1611.63,1967.99 1567.86,1936.89C1542.97,1919.21 1531.07,1905.93 1514.98,1888.82C1514.72,1888.54 1514.33,1888.44 1513.97,1888.56C1506.05,1891.18 1497.58,1892.59 1488.78,1892.58C1487.57,1892.58 1486.38,1892.55 1485.18,1892.49C1484.85,1892.48 1484.54,1892.63 1484.35,1892.91C1484.15,1893.18 1484.11,1893.54 1484.23,1893.85C1501.91,1939.65 1525.68,1970.93 1553.65,1992.2C1556.26,1994.18 1556.87,1999.67 1553.64,2000.7C1510.57,2014.51 1472.53,2014.2 1437.64,2004.12C1423.94,2000.16 1415.63,1996.57 1420.69,1943.11C1423.56,1912.71 1429.12,1895.76 1435.9,1873.27C1436.01,1872.9 1435.9,1872.49 1435.61,1872.23C1428.37,1865.76 1422.32,1858 1417.81,1849.3C1417.66,1849.01 1417.37,1848.81 1417.05,1848.77C1416.72,1848.74 1416.4,1848.87 1416.19,1849.13C1385.34,1887.35 1370.12,1923.58 1365.68,1958.44C1365.26,1961.69 1360.82,1964.97 1358.31,1962.69C1324.82,1932.28 1306.08,1899.17 1297.38,1863.92C1293.95,1850.07 1292.91,1841.08 1341.75,1818.74C1369.51,1806.04 1386.96,1802.38 1409.82,1797.02C1410.19,1796.93 1410.48,1796.63 1410.56,1796.25C1412.58,1786.54 1416.35,1777.48 1421.54,1769.41ZM1488.99,1740.53C1449.23,1740.47 1416.89,1772.71 1416.84,1812.47C1416.78,1852.24 1449.02,1884.57 1488.79,1884.63C1528.55,1884.69 1560.88,1852.45 1560.94,1812.68C1561,1772.91 1528.76,1740.58 1488.99,1740.53ZM1488.89,1742.58C1527.52,1742.58 1558.89,1773.94 1558.89,1812.58C1558.89,1851.21 1527.52,1882.58 1488.89,1882.58C1450.26,1882.58 1418.89,1851.21 1418.89,1812.58C1418.89,1773.94 1450.26,1742.58 1488.89,1742.58Z"
              fill="none"
              stroke="url(#darkEmboss)"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </g>
        </svg>
      </div>
    </div>
  );
}
